---
import { CollectionEntry, getCollection } from "astro:content";
import Layout from "../layouts/Layout.astro";
import readingTime from "../utils/readingTime";


interface Props {
  post: CollectionEntry<"blog">;
}

export async function getStaticPaths() {
  const blogEntries = await getCollection("blog");
  return blogEntries.map((entry) => ({
    params: { slug: entry.slug },
    props: { post: entry },
  }));
}

const { post } = Astro.props;
const { Content } = await post.render();
---

<Layout title={post.data.title} meta={{ description: post.data.description, title: post.data.title, image: post.data.image }}>
  <main class="flex justify-center items-center my-4 font-serif">
    <article
      class="max-w-2xl min-w-0 px-4 prose dark:prose-invert prose-base md:prose-lg"
    >
      <h1>{post.data.title}</h1>
      <div class="flex flex-col -space-y-1 prose not-prose font-extralight italic">
        {
          post.data.author && (
            <div class="flex space-x-2 items-center">
              <p class="dark:text-gray-300 text-gray-700">By {post.data.author}</p>
            </div>
          )
        }
        {
          post.data.publishDate && (
            <div class="flex space-x-2 items-center">
              <p class="dark:text-gray-300 text-gray-700">
                {post.data.publishDate.toLocaleDateString("en-US", {
                  month: "long",
                  day: "numeric",
                  year: "numeric",
                })}
              </p>
            </div>
          )
        }
        {
          post.data.showReadTime && (
            <div class="flex space-x-2 items-center">
              <p class="dark:text-gray-300 text-gray-700">
                {readingTime(post.body)}
              </p>
            </div>
          )
        }
      </div>
      {post.data.image ? <img src={post.data.image} alt="" /> : <>{(post.data.publishDate || post.data.showReadTime || post.data.author) ? <hr /> : <></>}</>}
      <Content />
    </article>
  </main>
</Layout>

<style is:global>
  .MathJax[display="true"][jax="SVG"] {
    display: flex !important;
    justify-content: center !important;
  }

  .MathJax[jax="SVG"] {
    display: inline-block !important;
    vertical-align: middle !important;
  }
</style>

<script is:inline>
  function main() {
    let copyButtonLabel = "Copy";
    let codeBlocks = Array.from(document.querySelectorAll("pre"));

    for (let codeBlock of codeBlocks) {
      let wrapper = document.createElement("div");
      wrapper.className = "relative group";

      let copyButton = document.createElement("button");
      copyButton.className = "absolute top-0 right-0 px-2 py-1 border border-white rounded-md group-hover:opacity-100 opacity-0 transition-opacity mx-2 my-2.5";
      copyButton.innerHTML = copyButtonLabel;

      codeBlock.setAttribute("tabindex", "0");
      codeBlock.appendChild(copyButton);
      // wrap codebock with relative parent element
      if (codeBlock.parentNode) {
        codeBlock.parentNode.insertBefore(wrapper, codeBlock);
      }
      wrapper.appendChild(codeBlock);

      copyButton.addEventListener("click", async () => {
        await copyCode(codeBlock, copyButton);
      });
    }

    async function copyCode(block, button) {
      let code = block.querySelector("code");
      let text = code.innerText;

      await navigator.clipboard.writeText(text);

      // visual feedback that task is completed
      button.innerText = "Copied!";

      setTimeout(() => {
        button.innerText = copyButtonLabel;
      }, 700);
    }
  } 

  main()
</script>
